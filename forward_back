#!/bin/bash

# Change directories while storing history and unique items from history (two lists).
# Traverse using those lists
# Access/manipulate those lists
# View those lists

_GOTO_UPDATE_HISTORY=
_GOTO_IGNORE_CMDS=true

_ignore_cmds ()
{
    local cmds=(
        'back'
        'down'
        'drop'
        'forward'
        'goto'
        'goto_help'
        'up'
    )

    local dup_switch=

    for i in "${cmds[@]}"; do
        dup_switch=
        while read -r -d: ; do
            if [ "$i" == "$REPLY" ]; then
                dup_switch=true
                break
            fi
        done <<< "$HISTIGNORE"
        [ -z "$dup_switch" ] &&
            HISTIGNORE="$HISTIGNORE${HISTIGNORE:+:}$i"
    done
}

_goto_help ()
{
cat <<EOF

forward_back: Change directories while storing history and unique directories in two lists.
This file must be sourced in.
Interact inclusively or exclusively with lists using functions below:

Useage:

  goto            : print contents of unique list followed by history list.
  goto [dir]      : cd to dir and add to lists.
  goto [-[n]]     : equivalent to cd -; optionally, provide number of item from list.

Unique List Useage:

  up              : traverse up in list.
  down            : traverse down in list.
  drop [n]        : drop all dirs from list; optionally, specify item number.

History List Useage:

  back            : traverse back in list.
  forward         : traverse forward in list.

EOF
}

[ "$(caller)" == "0 NULL" ] && {
    _goto_help
    exit 1
}

alias goto='        _goto_goto'
alias drop='        _goto_drop'
alias down='        _goto_down'
alias up='          _goto_up'
alias back='        _goto_back'
alias forward='     _goto_forward'
alias goto_help='   _goto_help'

unset _goto_dir_list[@]
_goto_dir_list[0]="$PWD"
_goto_dir_list_index=0

unset _goto_dir_history[@]
_goto_dir_history[0]="$PWD"
_goto_dir_history_index=0
_goto_dir_history_limit=20

[ -n "$_GOTO_IGNORE_CMDS" ] && _ignore_cmds

_goto_goto ()
{
    local destination="$1"

    destination="${destination/#\~/$HOME}"

    case "$destination" in
        # cd to number on list
        -[[:digit:]]*)
            _goto_dir_list_index="${1:1}"
            destination="${_goto_dir_list[$_goto_dir_list_index]}"

            if [ "$(cd "$destination"; pwd)" == "$PWD" ]; then
                return
            fi
            _goto_push_to_history "$destination"
            cd "$destination"
            ;;
        # print lists
        "")
            printf '\e\n'
            _goto_print_list
            printf '\e\n'
            _goto_print_history
            printf '\e\n'
            ;;
        # cd to new directory or current directory
        *)
            if [ "$(cd "$destination"; pwd)" == "$PWD" ]; then
                return
            fi
            cd "$destination" && {
                _goto_update_list "$PWD"
                _goto_push_to_history "$PWD"
            }
            ;;
    esac
}

## UNIQUE LIST FUNCTIONS ##

_goto_up ()
{
    # change to previous directory on list

    local destination

    if [ $_goto_dir_list_index -gt 0 ]; then
        ((_goto_dir_list_index--))
        destination="${_goto_dir_list[$_goto_dir_list_index]}"
    else
        destination="$PWD"
    fi

    _goto_update_history_by_match

    cd "$destination"
}

_goto_down ()
{
    # change to next directory on list
    local destination
    if [ $((_goto_dir_list_index + 1)) -lt "${#_goto_dir_list[@]}" ]; then
        ((_goto_dir_list_index++))
        destination="${_goto_dir_list[$_goto_dir_list_index]}"
    else
        destination="$PWD"
    fi

    _goto_update_history_by_match

    cd "$destination"
}

_goto_drop ()
{
    case "$1" in
        # remove dir from list by number
        [[:digit:]])
            unset _goto_dir_list[$1]
            _goto_dir_list=( "${_goto_dir_list[@]}" )
            ((_goto_dir_list_index--))
            ;;
        # remove all dirs from list
        *)
            unset _goto_dir_list[@]
            _goto_dir_list[0]="$PWD"
            _goto_dir_list_index=0
            ;;
    esac
}

_goto_print_list ()
{
    local dest string count=0
    {
        for dest in "${_goto_dir_list[@]}"; do
            if [ "$dest" == "$PWD" ]; then
                printf "\033[32m%s" "*" >&2
            else
                printf "\033[37m%s" " " >&2
            fi
            printf " %s %s\n\033[00m" "$count" "$dest" >&2
            ((count++))
        done
    } >&2
}

# is the destination already in the list?

_goto_update_list ()
{
    if $(_goto_file_is_unique "$1"); then
	_goto_dir_list_index="${#_goto_dir_list[@]}"
        _goto_dir_list[$_goto_dir_list_index]="$PWD"
    fi
    _goto_select_from_list "$PWD"
}

_goto_select_from_list ()
{
    local item count=0
    for item in "${_goto_dir_list[@]}"; do
        if [ "$1" == "$item" ]; then
            _goto_dir_list_index=$count
            return
        fi
        ((count++))
    done
}

_goto_file_is_unique ()
{
    local dest
    for dest in "${_goto_dir_list[@]}"; do
        [ "$1" == "$dest" ] && return 1  # strip newline from $1, check if in list
    done
    # not in list
    return 0
}

_goto_update_list_by_match ()
{
    local count=0
    local dest
    for dest in "${_goto_dir_list[@]}"; do
        _goto_dir_list_index=$count
        if [ "$dest" == "$PWD" ]; then
            return
        fi
        ((count++))
    done
}


## History Functions ##

_goto_back ()
{
    [ $_goto_dir_history_index -gt 0 ] && {
        ((_goto_dir_history_index--))
        local destination="${_goto_dir_history[$_goto_dir_history_index]}"
        cd "$destination"
        _goto_update_list_by_match
        return
    }
    return 1
}

_goto_forward ()
{
    [ -n "${_goto_dir_history[ $((_goto_dir_history_index + 1)) ]}" ] && {
        ((_goto_dir_history_index++))
        local destination="${_goto_dir_history[$_goto_dir_history_index]}"
        _goto_select_from_list "$destination"
        cd "$destination"
        _goto_update_list_by_match
        return
    }
    return 1
}

_goto_print_history ()
{
    local dest string count=0
    {
        for dest in "${_goto_dir_history[@]}"; do
            if [ $count -eq $_goto_dir_history_index ]; then
                printf "\033[32m%s" "> " >&2
            else
                printf "\033[37m%s" "  " >&2
            fi
            printf "%s %s\n\033[00m" "-" "$dest" >&2
            ((count++))
        done
    }
>&2
}

_goto_push_to_history ()
{
    if [ "${_goto_dir_history[$_goto_dir_history_index]}" == "$PWD" ] && \
        [ "${_goto_dir_history_index}" -eq "$(( ${#_goto_dir_history[@]} - 1))" ]; then
        return
    fi

    ((_goto_dir_history_index++))
    if [ $_goto_dir_history_index -gt $_goto_dir_history_limit ]; then
        _goto_dir_history=( "${_goto_dir_history[@]:1}" )
        ((_goto_dir_history--))
    fi

    _goto_dir_history[$_goto_dir_history_index]="$1"

    if [ $_goto_dir_history_index -lt $(( ${#_goto_dir_history[@]} - 1 )) ]; then
        _goto_dir_history=( "${_goto_dir_history[@] : 0 : $_goto_dir_history_index + 1}" )
    fi
}

_goto_update_history_by_match ()
{
    [ -z "$_GOTO_UPDATE_HISTORY" ] && return
    local count=0
    local dest

    for dest in "${_goto_dir_history[@]}"; do
        _goto_dir_history_index=$count
        if [ "$dest" == "$PWD" ]; then
            return
        fi
        ((count++))
    done
}
